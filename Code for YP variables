// Eco variables for Yucatan Peninsula

// Step 1. Create filters to determine study area
var bound = aoi 
//var bound = aoi.geometry().bounds(); geographic limit

//Map.addLayer(bound, {}, 'bound');

//Construct the start and end dates:
var start = ee.Date('2015-01-01');
var finish = ee.Date('2019-12-31');

// Step 2. Create the variable layers

// Set of variables 1 Load WorldClim BIO Variables V1
var bioclim = ee.Image ('WORLDCLIM/V1/BIO')
              .clip(bound);
              
// Separation of bands for analysis

var bio01 = bioclim.select('bio01'); // Anual Mean Temperature
var bio02 = bioclim.select('bio02'); // Mean Diurnal Range
var bio03 = bioclim.select('bio03'); // Isothermality
var bio04 = bioclim.select('bio04'); // Temperature seasonality
var bio05 = bioclim.select('bio05'); // Max temperature of warmest month           
var bio06 = bioclim.select('bio06'); // Min temperature of the coldest month
var bio07 = bioclim.select('bio07'); // Temperature annual range
var bio08 = bioclim.select('bio08'); // Mean temperature of the wettest quarter
var bio09 = bioclim.select('bio09'); // Mean temperature of the driest quarter
var bio10 = bioclim.select('bio10'); // Mean temperature of the warmest quarter
var bio11 = bioclim.select('bio11'); // Mean temperature of the coldest quarter 
var bio12 = bioclim.select('bio12'); // Annual precipitation 
var bio13 = bioclim.select('bio13'); // Precipitation of the wettest month
var bio14 = bioclim.select('bio14'); // Precipitation of the driest month 
var bio15 = bioclim.select('bio15'); // Precipitation seasonality
var bio16 = bioclim.select('bio16'); // Precipitation of wettest quarter
var bio17 = bioclim.select('bio17'); // Precipitation of driest quarter
var bio18 = bioclim.select('bio18'); // Precipitation of warmest quarter
var bio19 = bioclim.select('bio19'); // Precipitation of coldest quarter 


// Variable 2. Elevation and terrain modeling

// Load SRTM Digital Elevation Data 30m

var elevation = ee.Image ( 'USGS/SRTMGL1_003')
                .clip(aoi);
                
// Load Global SRTM Topographic Diversity
var topo_d = ee.Image('CSP/ERGo/1_0/Global/SRTM_topoDiversity')
            .clip(aoi);
           
// Load Global SRTM CHILI (Continuous Heat-Insolation Load Index)
var chili = ee.Image('CSP/ERGo/1_0/Global/SRTM_CHILI')
            .clip(aoi);
           
// Apply slope algorithm to elevation.
var slope = ee.Terrain.slope(elevation);

// Get the aspect (in degrees).
var aspect = ee.Terrain.aspect(elevation);

// Calculate curvature
var curvature = ee.Terrain.slope(slope);r
 
 // Calculate hillshade
var hillshade = ee.Terrain.hillshade(elevation);

// Display all elevation related variables
// Map.addLayer(elevation, {}, 'Elevation');
// Map.addLayer(topo_d, {}, 'Topographic Diversity');
// Map.addLayer(chili, {}, 'Continuous Heat-Insolation Load Index');
// Map.addLayer(slope, {}, 'Slope');
// Map.addLayer(aspect, {}, 'Aspect');
// Map.addLayer(curvature, {}, 'Curvature')               
                
// Variable 3. Load AG100: ASTER Global Emissivity Dataset 100-meter V003

var emissivity = ee.Image('NASA/ASTER_GED/AG100_003')
            .clip(bound);
            
// Seperate bands for analysis

var temperature = emissivity.select('temperature');
var temperature_sdev = emissivity.select('temperature_sdev');
var temp_c = temperature.multiply(0.01).subtract(273.15);
var temp_c_sdev = temperature_sdev.multiply(0.01).subtract(273.15);

// Map.addLayer(temp_c, {}, 'temperature');

// Variable 4. Precipitation

var chirps= ee.ImageCollection('UCSB-CHG/CHIRPS/PENTAD')
            .filterBounds(bound)
            .filterDate(start, finish);

var chirps_mean = chirps.select('precipitation')
          .reduce('mean')          
          .rename('mean_precipitation')
          .float();  
var chirps_max = chirps.select('precipitation')
          .reduce('max')          
          .rename('max_precipitation')
          .float();
var chirps_min = chirps.select('precipitation')
          .reduce('min')          
          .rename('min_precipitation')
          .float();          

var precip_mean = chirps_mean.clip(aoi);
var precip_max = chirps_max.clip(aoi);
var precip_min = chirps_min.clip(aoi);

// Map.addLayer(precip_mean, {}, 'precip_mean');
// Map.addLayer(precip_max, {}, 'precip_mean');
// Map.addLayer(precip_min, {}, 'precip_mean');

// Variable 5 Landsat 8 Annual NDVI
var ndvi = ee.ImageCollection('LANDSAT/LC08/C01/T1_ANNUAL_NDVI')
            .filterBounds(bound)
            .filterDate(start, finish)
            .reduce('mean')
            .clip(bound);
           
// Map.addLayer(ndvi, {}, 'ndvi');      



// Variable 6 Forest cover
var hansen = ee.Image('UMD/hansen/global_forest_change_2017_v1_5').clip(aoi);
var treeCanopyCover = hansen.select('treecover2000');
var treeCanopyCoverVis = {
  min: 0.0,
  max: 100.0,
  palette:
      ['3d3d3d', '080a02', '080a02', '080a02', '106e12', '37a930', '03ff17'],
};

// Map.addLayer(treeCanopyCover, treeCanopyCoverVis, 'Tree Canopy Cover');


// Variable 7 Global Surface Water

var gsw = ee.Image('JRC/GSW1_0/GlobalSurfaceWater').clip(aoi);
var surfacewater = gsw.select('occurrence');
var surfacewaterVis = {
  min: 0.0,
  max: 100.0,
  palette: ['ffffff', 'ffbbbb', '0000ff'],
};

// Map.addLayer(surfacewater, surfacewaterVis, 'Surface Water');


// Variable 8 Mangrove

var mangrove = ee.ImageCollection('LANDSAT/MANGROVE_FORESTS')
            .filterBounds(bound)
            ;
var mangrovesVis = {
  min: 0,
  max: 1.0,
  palette: ['d40115'],
};

// Map.addLayer(mangrove, mangrovesVis, 'Mangroves');

// Variable 9 MODIS Leaf Area Index
var modislai = ee.ImageCollection('MODIS/006/MCD15A3H')
            .filterBounds(bound)
            .filterDate(start, finish)
            .reduce('mean')
            .clip(bound);
var fpar = modislai.select('Fpar_mean');
var lai = modislai.select('Lai_mean');
var defaultVisualizationVis = {
  min: 0.0,
  max: 100.0,
  palette: ['e1e4b4', '999d60', '2ec409', '0a4b06'],
};


//Map.addLayer(lai, defaultVisualizationVis, 'Leaf Area Index');
Map.addLayer(fpar, defaultVisualizationVis, 'Fraction of Photosynthetically Active Radiation');  

// Variable 10 Forest Canopy Height

var gfch = ee.Image('NASA/JPL/global_forest_canopy_height_2005').clip(bound);
var forestCanopyHeight = gfch.select('1');
var forestCanopyHeightVis = {
  min: 0.0,
  max: 30.0,
  palette: [
    'ffffff', 'fcd163', '99b718', '66a000', '3e8601', '207401', '056201',
    '004c00', '011301'
  ],
};

Map.addLayer(forestCanopyHeight, forestCanopyHeightVis, 'Forest Canopy Height');

// Variable 11 Accessibility to cities
var acc = ee.Image('Oxford/MAP/accessibility_to_cities_2015_v1_0').clip(bound);
var accessibility = acc.select('accessibility');
var accessibilityVis = {
  min: 0.0,
  max: 41556.0,
  gamma: 4.0,
};

//Map.addLayer(accessibility, accessibilityVis, 'Accessibility');

// Variable 12 Mean Net Primary Production


var dataset = ee.ImageCollection('MODIS/006/MOD17A3H')
             .filterBounds(bound)
             .reduce('mean')
             .clip(bound)
;
var npp = dataset.select('Npp_mean');
var nppVis = {
  min: 0.0,
  max: 19000.0,
  palette: ['bbe029', '0a9501', '074b03'],
};

//Map.addLayer(npp, nppVis, 'NPP');



// Step 3. Export the images, specifying scale and region.


Export.image.toDrive({
  image: bio01,
  description: 'bio01',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: bio02,
  description: 'bio02',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: bio03,
  description: 'bio03',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: bio04,
  description: 'bio04',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: bio05,
  description: 'bio05',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: bio06,
  description: 'bio06',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: bio07,
  description: 'bio07',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: bio08,
  description: 'bio08',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: bio09,
  description: 'bio09',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: bio10,
  description: 'bio10',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: bio11,
  description: 'bio11',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: bio12,
  description: 'bio12',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: bio13,
  description: 'bio13',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: bio14,
  description: 'bio14',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: bio15,
  description: 'bio15',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: bio16,
  description: 'bio16',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: bio17,
  description: 'bio17',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: bio18,
  description: 'bio18',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});



Export.image.toDrive({
  image: bio19,
  description: 'bio19',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});


// Step 3. Export the images, specifying scale and region.
Export.image.toDrive({
  image: elevation,
  description: 'elevation',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: topo_d,
  description: 'topo_d',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: chili,
  description: 'chili',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: slope,
  description: 'slope',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: temp_c,
  description: 'temp_c',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: aspect,
  description: 'aspect',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: curvature,
  description: 'curvature',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: hillshade,
  description: 'hillshade',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: temp_c_sdev,
  description: 'temp_c_sdev',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: precip_mean,
  description: 'precip_mean',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});


Export.image.toDrive({
  image: precip_max,
  description: 'precip_max',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: precip_min,
  description: 'precip_min',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: ndvi,
  description: 'ndvi',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});


Export.image.toDrive({
  image: treeCanopyCover,
  description: 'treeCanopyCover',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
});

Export.image.toDrive({
  image: surfacewater,
  description: 'surfacewater',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
})

Export.image.toDrive({
  image: lai,
  description: 'lai',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
})


Export.image.toDrive({
  image: fpar,
  description: 'fpar',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
})

Export.image.toDrive({
  image: forestCanopyHeight,
  description: 'forestCanopyHeight',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
})


Export.image.toDrive({
  image: accessibility,
  description: 'accessibility',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
})



Export.image.toDrive({
  image: npp,
  description: 'npp',
  maxPixels: 1e11,
  scale: 1000,
  region: bound,
  folder: 'bio_enviro_test'
})
